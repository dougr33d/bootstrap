" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'junegunn/vim-easy-align'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ervandew/supertab'
Plug 'pedrohdz/vim-yaml-folds'
Plug 'frazrepo/vim-rainbow'
Plug 'tpope/vim-commentary'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-rooter'

Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'ryanoasis/vim-devicons'
" Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Initialize plugin system
call plug#end()

let g:airline_powerline_fonts = 1

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

nmap <C-l> :bn<cr>
nmap <C-h> :bp<cr>

:set backspace=2
:set hidden
:set incsearch
:set tabstop=3 
:set softtabstop=3 
:set expandtab 
:set shiftwidth=3 
:set smartcase
:set autoindent
:set smartindent

highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

"autocmd BufWritePre *.sv  :%s/\s\+$//e
"autocmd BufWritePre *.pkg :%s/\s\+$//e

augroup icf_ft
  au!
  autocmd BufNewFile,BufRead *.icf   set syntax=verilog
augroup END

augroup hier_ft
  au!
  autocmd BufNewFile,BufRead *.hier  set syntax=verilog
augroup END

augroup sv_ft
  au!
  autocmd BufNewFile,BufRead *.sv  set syntax=verilog
  autocmd BufNewfile,BufRead *.sv setlocal commentstring=//\ %s
augroup END

augroup tsv_ft
  au!
  autocmd BufNewFile,BufRead *.tsv  set syntax=verilog
augroup END

let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = '>'
"let g:airline#extensions#tabline#left_alt_sep = '>'
"let g:airline_statusline_ontop=1

" Show trailing whitepace and spaces before a tab:
:highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
:autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
:set modeline
augroup newsv
   au!
   autocmd BufNewFile,BufRead *.vs set syntax=systemverilog
augroup END

let NERDTreeQuitOnOpen=1

if executable('rg')
   let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
endif
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0

:silent let git_top_level_list=systemlist('git rev-parse --show-toplevel')
:if len(git_top_level_list) > 0
:  let git_top_level=git_top_level_list[0]
:else
:  let git_top_level='.'
:endif
:command! -bang PFiles call fzf#vim#files(git_top_level, <bang>0)

" set autochdir and disable auto-vim-rooter
"let g:rooter_use_lcd = 1
let g:rooter_cd_cmd="lcd"
let g:rooter_manual_only = 1
set autochdir

" define a command which runs ripgrep in the root directory as determined by rooter
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case " . shellescape(<q-args>), 1, {"dir": FindRootDirectory()})
command! -bang -nargs=* RG call fzf#vim#grep2("rg --column --line-number --no-heading --color=always --smart-case -- ", <q-args>, 1, {"dir": FindRootDirectory()})
